<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

<!-- note: the localDataSource bean is typically defined in the app config files -->

	<bean id="propertyConfigurer" 
      class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>/WEB-INF/hibernate.properties</value>
		</property>
	</bean>
	
	<bean id="propertyOverrideConfigurer" 
      class="org.springframework.beans.factory.config.PropertyOverrideConfigurer">
		<property name="location">
			<value>/WEB-INF/bean.properties</value>
		</property>
	</bean>
	
	
	<!-- note: dataSource bean is in the instance specific dao config files -->
	

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="localDataSource"/>
		</property>
	
		<property name="eventListeners">
			<map>
				<entry key="post-insert"><ref bean="auditHibernateListener"/></entry>
				<entry key="post-update"><ref bean="auditHibernateListener"/></entry>
				<entry key="post-delete"><ref bean="auditHibernateListener"/></entry>
				<entry key="post-load"><ref bean="auditHibernateListener"/></entry>
			</map>
		</property>
	    <property name="hibernateProperties">
	    	<ref bean="sessionFactoryHibernateProperties"/>
 		</property>
    	<property name="configurationClass"><value>edu.ucsf.lava.core.dao.hibernate.LavaConfiguration</value></property>
    	<!-- Hibernate filter definitions must be loaded before entity mappings (note that the definitions are processed
    		twice since they are also incl. in the mappingDirectory below, but does no harm) -->
    	<property name="mappingLocations">
    	  		<list>
    	  			<value>WEB-INF/hibernate/crms/assessment/Filters.hbm.xml</value>
    			</list>
    	</property>
    	<property name="mappingDirectoryLocations">
    	  		<list>
    	  			<value>WEB-INF/hibernate/</value>
    			</list>
    	</property>
    </bean>
	
	<bean id="auditHibernateListener" class="edu.ucsf.lava.core.audit.AuditHibernateListener"/>
	

	

    
	<bean id="transactionAttributeSource" 
	   class="org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource">
		<property name="transactionAttribute">
	   		<ref bean="transactionAttribute"/>
	   	</property>
   </bean>

	<bean id="transactionAttribute" 
	   class="org.springframework.transaction.interceptor.DefaultTransactionAttribute">
	    <!-- PROPAGATION_REQUIRED means the Java Transaction API (JTA) manages transactions
	         with request granularity, i.e. spanning all service calls during the request,
	         where each service call participates in the same existing transation. 
	         PROPAGATION_REQUIRES_NEW means per-service method granularity -->
		<property name="propagationBehaviorName">
			<value>PROPAGATION_REQUIRED</value> 
		</property>
		<property name="isolationLevelName">
			<value>ISOLATION_DEFAULT</value>
		</property>
   </bean>
   
   <!--  TRANSACTION MANAGER DEFINED in [instance]-env-[server].xml in instance context -->
   
    <bean id="abstractTransactionProxy" abstract="true" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager">
			<ref bean="transactionManager"/>
		</property>
		<property name="transactionAttributeSource">
			<ref bean="transactionAttributeSource"/>
		</property>			
	</bean>

   <bean id="lavaDao" parent="abstractTransactionProxy">
    	<property name="target">
			<bean id="lavaDaoImpl" class="edu.ucsf.lava.core.dao.hibernate.LavaDaoHibernateImpl">
				<property name="sessionFactory">
					<ref bean="sessionFactory"/>
				</property>
			</bean>
		</property>			
	</bean>
   
    
    

    
   
   
</beans>
		
		