<?xml version="1.0"?> 

<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"
    [<!ENTITY protocolConfigInclude SYSTEM "classpath://../hibernate/crms/protocol/protocolConfigInclude.xml" >
     <!ENTITY protocolConfigFilterInclude SYSTEM "classpath://../hibernate/crms/protocol/protocolConfigFilterInclude.xml" >]>
     
<hibernate-mapping>

<class name="edu.ucsf.lava.crms.protocol.model.ProtocolVisitConfigBase" table="prot_node_config" select-before-update="true">

	&protocolConfigInclude;

	<many-to-one name="protocolTimepointConfigBase" class="edu.ucsf.lava.crms.protocol.model.ProtocolTimepointConfigBase" column="parent_id" lazy="false"/>
	
	<!-- bilateral -->
	<set name="protocolInstrumentConfigsBase" table="prot_node_config" inverse="true" cascade="all,delete-orphan" order-by="list_order" lazy="true">
 		<!-- the set of children are those that have the same parent -->
		<key column="parent_id"/>
		<one-to-many class="edu.ucsf.lava.crms.protocol.model.ProtocolInstrumentConfigBase"/> 
	</set>
	
	<!-- really only needs to be unilateral, but bilateral is much easier to deal with since the child end of 
		the association is persisted, so when in that handler do not have to deal with persisting the parent -->
	<set name="protocolVisitConfigOptionsBase" table="prot_opt_config" inverse="true" cascade="all,delete-orphan" order-by="eff_date desc,default_option desc" lazy="true">
		<key column="parent_id"/>
		<one-to-many class="edu.ucsf.lava.crms.protocol.model.ProtocolVisitConfigOptionBase"/>
	</set>		 

	&protocolConfigFilterInclude;
	
</class>	
	
		
</hibernate-mapping>
