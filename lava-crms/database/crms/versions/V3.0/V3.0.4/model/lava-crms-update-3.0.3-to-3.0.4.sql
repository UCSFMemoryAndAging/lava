SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL';-- ------------------------------------------------------- Placeholder table for view `vwrptprojectpatientstatus`-- -----------------------------------------------------CREATE TABLE IF NOT EXISTS `vwrptprojectpatientstatus` (`PIDN` INT, `FullNameRev` INT, `AGE` INT, `Gender` INT, `ProjName` INT, `StatusDate` INT, `Status` INT, `StatusNote` INT, `StatusOrder` INT, `ProjUnitDesc` INT, `Project` INT, `Unit` INT, `UnitOrder` INT);-- ------------------------------------------------------- Placeholder table for view `vwrptprojectvisitlist`-- -----------------------------------------------------CREATE TABLE IF NOT EXISTS `vwrptprojectvisitlist` (`PIDN` INT, `FullNameRev` INT, `TransLanguage` INT, `Gender` INT, `AGE` INT, `VLocation` INT, `VType` INT, `VWith` INT, `VDate` INT, `VStatus` INT, `ProjName` INT, `VNotes` INT, `VDateNoTime` INT);-- ------------------------------------------------------- Placeholder table for view `lq_view_demographics`-- -----------------------------------------------------CREATE TABLE IF NOT EXISTS `lq_view_demographics` (`PIDN_demographics` INT, `DOB` INT, `AGE` INT, `Gender` INT, `Hand` INT, `Deceased` INT, `DOD` INT, `PrimaryLanguage` INT, `TestingLanguage` INT, `TransNeeded` INT, `TransLanguage` INT);-- ------------------------------------------------------- Placeholder table for view `lq_view_enrollment`-- -----------------------------------------------------CREATE TABLE IF NOT EXISTS `lq_view_enrollment` (`EnrollStatID` INT, `PIDN_Enrollment` INT, `ProjName` INT, `SubjectStudyID` INT, `ReferralSource` INT, `LatestDesc` INT, `LatestDate` INT, `LatestNote` INT, `ReferredDesc` INT, `ReferredDate` INT, `ReferredNote` INT, `DeferredDesc` INT, `DeferredDate` INT, `DeferredNote` INT, `EligibleDesc` INT, `EligibleDate` INT, `EligibleNote` INT, `IneligibleDesc` INT, `IneligibleDate` INT, `IneligibleNote` INT, `DeclinedDesc` INT, `DeclinedDate` INT, `DeclinedNote` INT, `EnrolledDesc` INT, `EnrolledDate` INT, `EnrolledNote` INT, `ExcludedDesc` INT, `ExcludedDate` INT, `ExcludedNote` INT, `WithdrewDesc` INT, `WithdrewDate` INT, `WithdrewNote` INT, `InactiveDesc` INT, `InactiveDate` INT, `InactiveNote` INT, `DeceasedDesc` INT, `DeceasedDate` INT, `DeceasedNote` INT, `AutopsyDesc` INT, `AutopsyDate` INT, `AutopsyNote` INT, `ClosedDesc` INT, `ClosedDate` INT, `ClosedNote` INT, `EnrollmentNotes` INT, `modified` INT);-- ------------------------------------------------------- Placeholder table for view `lq_view_instruments`-- -----------------------------------------------------CREATE TABLE IF NOT EXISTS `lq_view_instruments` (`InstrID` INT, `VID` INT, `ProjName` INT, `PIDN_Instrument` INT, `InstrType` INT, `InstrVer` INT, `DCDate` INT, `DCBy` INT, `DCStatus` INT, `DCNotes` INT, `ResearchStatus` INT, `QualityIssue` INT, `QualityIssue2` INT, `QualityIssue3` INT, `QualityNotes` INT, `DEDate` INT, `DEBy` INT, `DEStatus` INT, `DENotes` INT, `DVDate` INT, `DVBy` INT, `DVStatus` INT, `DVNotes` INT, `latestflag` INT, `FieldStatus` INT, `AgeAtDC` INT, `modified` INT, `summary` INT);-- ------------------------------------------------------- Placeholder table for view `lq_view_visit`-- -----------------------------------------------------CREATE TABLE IF NOT EXISTS `lq_view_visit` (`VID` INT, `PIDN_Visit` INT, `ProjName` INT, `VLocation` INT, `VType` INT, `VWith` INT, `VDate` INT, `VTime` INT, `VStatus` INT, `VNotes` INT, `FUMonth` INT, `FUYear` INT, `FUNote` INT, `WList` INT, `WListNote` INT, `WListDate` INT, `VShortDesc` INT, `AgeAtVisit` INT, `modified` INT);-- ------------------------------------------------------- View `vwrptprojectpatientstatus`-- -----------------------------------------------------DROP TABLE IF EXISTS `vwrptprojectpatientstatus`;CREATE  OR REPLACE ALGORITHM=UNDEFINED  SQL SECURITY DEFINER VIEW `vwrptprojectpatientstatus` AS select `p`.`PIDN` AS `PIDN`,`p`.`FullNameRev` AS `FullNameRev`,`p`.`AGE` AS `AGE`,`p`.`Gender` AS `Gender`,`lps`.`ProjName` AS `ProjName`,`lps`.`LatestDate` AS `StatusDate`,`lps`.`LatestDesc` AS `Status`,`lps`.`LatestNote` AS `StatusNote`,(case `lps`.`LatestDesc` when _utf8'ACTIVE' then 0 when _utf8'FOLLOW-UP' then 1 when _utf8'CANCELED' then 5 when _utf8'CLOSED' then 6 when _utf8'INACTIVE' then 4 when _utf8'PRE-APPOINTMENT' then 2 when _utf8'PENDING' then 3 when _utf8'ENROLLED' then 7 when _utf8'DECEASED' then 8 when _utf8'DECEASED-PERFORMED' then 9 when _utf8'DECEASED-NOT PERFORMED' then 10 when _utf8'REFERRED' then 11 when _utf8'ELIGIBLE' then 12 when _utf8'INELIGIBLE' then 13 when _utf8'WITHDREW' then 14 when _utf8'EXCLUDED' then 15 when _utf8'DECLINED' then 16 else 17 end) AS `StatusOrder`,`pu`.`Project` AS `ProjUnitDesc`,`pu`.`Project` AS `Project`,_utf8'OVERALL' AS `Unit`,1 AS `UnitOrder` from ((`patient` `p` join `enrollmentstatus` `lps` on((`p`.`PIDN` = `lps`.`PIDN`))) join `projectunit` `pu` on((`lps`.`ProjName` = `pu`.`ProjUnitDesc`))) union select `p`.`PIDN` AS `PIDN`,`p`.`FullNameRev` AS `FullNameRev`,`p`.`AGE` AS `AGE`,`p`.`Gender` AS `Gender`,`lps`.`ProjName` AS `ProjName`,`lps`.`LatestDate` AS `LatestDate`,`lps`.`LatestDesc` AS `LatestDesc`,`lps`.`LatestNote` AS `StatusNote`,(case `lps`.`LatestDesc` when _utf8'ACTIVE' then 0 when _utf8'FOLLOW-UP' then 1 when _utf8'CANCELED' then 5 when _utf8'CLOSED' then 6 when _utf8'INACTIVE' then 4 when _utf8'PRE-APPOINTMENT' then 2 when _utf8'PENDING' then 3 when _utf8'ENROLLED' then 7 when _utf8'DECEASED' then 8 when _utf8'DECEASED-PERFORMED' then 9 when _utf8'DECEASED-NOT PERFORMED' then 10 when _utf8'REFERRED' then 11 when _utf8'ELIGIBLE' then 12 when _utf8'INELIGIBLE' then 13 when _utf8'WITHDREW' then 14 when _utf8'EXCLUDED' then 15 when _utf8'DECLINED' then 16 else 17 end) AS `StatusOrder`,`pu`.`ProjUnitDesc` AS `ProjUnitDesc`,`pu`.`Project` AS `Project`,`pu`.`Unit` AS `Unit`,2 AS `UnitOrder` from ((`patient` `p` join `enrollmentstatus` `lps` on((`p`.`PIDN` = `lps`.`PIDN`))) join `projectunit` `pu` on((`lps`.`ProjName` = `pu`.`ProjUnitDesc`))) where (`pu`.`Unit` is not null);-- ------------------------------------------------------- View `vwrptprojectvisitlist`-- -----------------------------------------------------DROP TABLE IF EXISTS `vwrptprojectvisitlist`;CREATE  OR REPLACE ALGORITHM=UNDEFINED  SQL SECURITY DEFINER VIEW `vwrptprojectvisitlist` AS select `p`.`PIDN` AS `PIDN`,`p`.`FullNameRev` AS `FullNameRev`,`p`.`TransLanguage` AS `TransLanguage`,`p`.`Gender` AS `Gender`,`p`.`AGE` AS `AGE`,`v`.`VLocation` AS `VLocation`,`v`.`VType` AS `VType`,`v`.`VWith` AS `VWith`,`v`.`VDate` AS `VDate`,`v`.`VStatus` AS `VStatus`,`v`.`ProjName` AS `ProjName`,`v`.`VNotes` AS `VNotes`,cast(`v`.`VDate` as date) AS `VDateNoTime` from (`patient` `p` join `visit` `v` on((`p`.`PIDN` = `v`.`PIDN`))) where (not((`v`.`VStatus` like _latin1'%CANC%')));-- ------------------------------------------------------- View `lq_view_demographics`-- -----------------------------------------------------DROP TABLE IF EXISTS `lq_view_demographics`;CREATE  OR REPLACE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `lq_view_demographics` AS select `patient`.`PIDN` AS `PIDN_demographics`,`patient`.`DOB` AS `DOB`,`patient`.`AGE` AS `AGE`,`patient`.`Gender` AS `Gender`,`patient`.`Hand` AS `Hand`,`patient`.`Deceased` AS `Deceased`,`patient`.`DOD` AS `DOD`,`patient`.`PrimaryLanguage` AS `PrimaryLanguage`,`patient`.`TestingLanguage` AS `TestingLanguage`,`patient`.`TransNeeded` AS `TransNeeded`,`patient`.`TransLanguage` AS `TransLanguage` from `patient` where (`patient`.`PIDN` > 0);-- ------------------------------------------------------- View `lq_view_enrollment`-- -----------------------------------------------------DROP TABLE IF EXISTS `lq_view_enrollment`;CREATE  OR REPLACE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `lq_view_enrollment` AS select `enrollmentstatus`.`EnrollStatID` AS `EnrollStatID`,`enrollmentstatus`.`PIDN` AS `PIDN_Enrollment`,`enrollmentstatus`.`ProjName` AS `ProjName`,`enrollmentstatus`.`SubjectStudyID` AS `SubjectStudyID`,`enrollmentstatus`.`ReferralSource` AS `ReferralSource`,`enrollmentstatus`.`LatestDesc` AS `LatestDesc`,`enrollmentstatus`.`LatestDate` AS `LatestDate`,`enrollmentstatus`.`LatestNote` AS `LatestNote`,`enrollmentstatus`.`ReferredDesc` AS `ReferredDesc`,`enrollmentstatus`.`ReferredDate` AS `ReferredDate`,`enrollmentstatus`.`ReferredNote` AS `ReferredNote`,`enrollmentstatus`.`DeferredDesc` AS `DeferredDesc`,`enrollmentstatus`.`DeferredDate` AS `DeferredDate`,`enrollmentstatus`.`DeferredNote` AS `DeferredNote`,`enrollmentstatus`.`EligibleDesc` AS `EligibleDesc`,`enrollmentstatus`.`EligibleDate` AS `EligibleDate`,`enrollmentstatus`.`EligibleNote` AS `EligibleNote`,`enrollmentstatus`.`IneligibleDesc` AS `IneligibleDesc`,`enrollmentstatus`.`IneligibleDate` AS `IneligibleDate`,`enrollmentstatus`.`IneligibleNote` AS `IneligibleNote`,`enrollmentstatus`.`DeclinedDesc` AS `DeclinedDesc`,`enrollmentstatus`.`DeclinedDate` AS `DeclinedDate`,`enrollmentstatus`.`DeclinedNote` AS `DeclinedNote`,`enrollmentstatus`.`EnrolledDesc` AS `EnrolledDesc`,`enrollmentstatus`.`EnrolledDate` AS `EnrolledDate`,`enrollmentstatus`.`EnrolledNote` AS `EnrolledNote`,`enrollmentstatus`.`ExcludedDesc` AS `ExcludedDesc`,`enrollmentstatus`.`ExcludedDate` AS `ExcludedDate`,`enrollmentstatus`.`ExcludedNote` AS `ExcludedNote`,`enrollmentstatus`.`WithdrewDesc` AS `WithdrewDesc`,`enrollmentstatus`.`WithdrewDate` AS `WithdrewDate`,`enrollmentstatus`.`WithdrewNote` AS `WithdrewNote`,`enrollmentstatus`.`InactiveDesc` AS `InactiveDesc`,`enrollmentstatus`.`InactiveDate` AS `InactiveDate`,`enrollmentstatus`.`InactiveNote` AS `InactiveNote`,`enrollmentstatus`.`DeceasedDesc` AS `DeceasedDesc`,`enrollmentstatus`.`DeceasedDate` AS `DeceasedDate`,`enrollmentstatus`.`DeceasedNote` AS `DeceasedNote`,`enrollmentstatus`.`AutopsyDesc` AS `AutopsyDesc`,`enrollmentstatus`.`AutopsyDate` AS `AutopsyDate`,`enrollmentstatus`.`AutopsyNote` AS `AutopsyNote`,`enrollmentstatus`.`ClosedDesc` AS `ClosedDesc`,`enrollmentstatus`.`ClosedDate` AS `ClosedDate`,`enrollmentstatus`.`ClosedNote` AS `ClosedNote`,`enrollmentstatus`.`EnrollmentNotes` AS `EnrollmentNotes`,`enrollmentstatus`.`modified` AS `modified` from `enrollmentstatus` where (`enrollmentstatus`.`EnrollStatID` > 0);-- ------------------------------------------------------- View `lq_view_instruments`-- -----------------------------------------------------DROP TABLE IF EXISTS `lq_view_instruments`;CREATE  OR REPLACE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `lq_view_instruments` AS select `i`.`InstrID` AS `InstrID`,`i`.`VID` AS `VID`,`i`.`ProjName` AS `ProjName`,`i`.`PIDN` AS `PIDN_Instrument`,`i`.`InstrType` AS `InstrType`,`i`.`InstrVer` AS `InstrVer`,`i`.`DCDate` AS `DCDate`,`i`.`DCBy` AS `DCBy`,`i`.`DCStatus` AS `DCStatus`,`i`.`DCNotes` AS `DCNotes`,`i`.`ResearchStatus` AS `ResearchStatus`,`i`.`QualityIssue` AS `QualityIssue`,`i`.`QualityIssue2` AS `QualityIssue2`,`i`.`QualityIssue3` AS `QualityIssue3`,`i`.`QualityNotes` AS `QualityNotes`,`i`.`DEDate` AS `DEDate`,`i`.`DEBy` AS `DEBy`,`i`.`DEStatus` AS `DEStatus`,`i`.`DENotes` AS `DENotes`,`i`.`DVDate` AS `DVDate`,`i`.`DVBy` AS `DVBy`,`i`.`DVStatus` AS `DVStatus`,`i`.`DVNotes` AS `DVNotes`,`i`.`latestflag` AS `latestflag`,`i`.`FieldStatus` AS `FieldStatus`,`i`.`AgeAtDC` AS `AgeAtDC`,`i`.`modified` AS `modified`,`s`.`Summary` AS `summary` from (`instrumenttracking` `i` join `instrumentsummary` `s` on((`i`.`InstrID` = `s`.`InstrID`))) where (`i`.`InstrID` > 0);-- ------------------------------------------------------- View `lq_view_visit`-- -----------------------------------------------------DROP TABLE IF EXISTS `lq_view_visit`;CREATE  OR REPLACE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `lq_view_visit` AS select `visit`.`VID` AS `VID`,`visit`.`PIDN` AS `PIDN_Visit`,`visit`.`ProjName` AS `ProjName`,`visit`.`VLocation` AS `VLocation`,`visit`.`VType` AS `VType`,`visit`.`VWith` AS `VWith`,`visit`.`VDate` AS `VDate`,`visit`.`VTime` AS `VTime`,`visit`.`VStatus` AS `VStatus`,`visit`.`VNotes` AS `VNotes`,`visit`.`FUMonth` AS `FUMonth`,`visit`.`FUYear` AS `FUYear`,`visit`.`FUNote` AS `FUNote`,`visit`.`WList` AS `WList`,`visit`.`WListNote` AS `WListNote`,`visit`.`WListDate` AS `WListDate`,`visit`.`VShortDesc` AS `VShortDesc`,`visit`.`AgeAtVisit` AS `AgeAtVisit`,`visit`.`modified` AS `modified` from `visit` where (`visit`.`VID` > 0);DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_after_set_linkdata`(user_name varchar(50), host_name varchar(25),method VARCHAR(25))BEGINIF method = 'VISIT' THEN  UPDATE temp_linkdata1, visit   SET temp_linkdata1.pidn = visit.PIDN, temp_linkdata1.link_date = visit.VDATE, temp_linkdata1.link_type = method   WHERE temp_linkdata1.link_id = visit.VID;ELSEIF method = 'INSTRUMENT' THEN  UPDATE temp_linkdata1, instrumenttracking   SET temp_linkdata1.pidn = instrumenttracking.PIDN, temp_linkdata1.link_date = instrumenttracking.DCDATE, temp_linkdata1.link_type = method   WHERE temp_linkdata1.link_id = instrumenttracking.InstrID;ELSE  UPDATE temp_linkdata1 SET link_type = method;END IF;#remove duplicatesCREATE TEMPORARY TABLE temp_linkdata (  pidn INTEGER NOT NULL,  link_date DATE NOT NULL,  link_id INTEGER NOT NULL,  link_type VARCHAR(50) NOT NULL);IF method = 'PIDN_DATE' THEN  #the link_id is an arbitrary incrementing integer, so we exclude it from determining if the row is unique    INSERT INTO temp_linkdata(pidn,link_date,link_id,link_type)   SELECT pidn,link_date, min(link_id), link_type FROM temp_linkdata1 GROUP BY pidn,link_date,link_type;ELSE  #the link_id is driving uniqueness and should be included in the grouping  INSERT INTO temp_linkdata(pidn,link_date,link_id,link_type)   SELECT pidn,link_date, link_id, link_type FROM temp_linkdata1 GROUP BY pidn,link_date,link_id,link_type;END IF;ALTER TABLE temp_linkdata ADD INDEX(pidn,link_date,link_id);END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_after_set_pidns`(user_name varchar(50), host_name varchar(25))BEGINCREATE TEMPORARY TABLE temp_pidn AS SELECT pidn FROM temp_pidn1 GROUP BY pidn;END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_clear_linkdata`(user_name varchar(50), host_name varchar(25))BEGINDROP TABLE IF EXISTS temp_linkdata;DROP TABLE IF EXISTS temp_linkdata1;END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_clear_pidns`(user_name varchar(50), host_name varchar(25))BEGINDROP TABLE IF EXISTS temp_pidn;DROP TABLE IF EXISTS temp_pidn1;END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_get_all_pidns`(user_name varchar(50), host_name varchar(25))BEGINSELECT pidn from patient order by pidn;END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_get_assessment_instruments`(user_name varchar(50), host_name varchar(25),query_type varchar(25), query_subtype VARCHAR(25), query_days INTEGER)BEGINCALL lq_audit_event(user_name,host_name,'crms.assessment.instruments',query_type);	IF query_type = 'Simple' THEN	SELECT p.pidn, i.* FROM lq_view_instruments i 		INNER JOIN temp_pidn p ON (p.PIDN = i.PIDN_Instrument)       ORDER BY p.pidn, i.DCDate,i.InstrType;ELSEIF query_type = 'SimpleAllPatients' THEN	SELECT p.pidn, i.*  FROM lq_view_instruments i 		RIGHT OUTER JOIN temp_pidn p ON (p.PIDN = i.PIDN_Instrument)       ORDER BY p.pidn, i.DCDate,i.InstrType;END IF;END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_get_enrollment_status`(user_name varchar(50), host_name varchar(25),query_type varchar(25), query_subtype VARCHAR(25), query_days INTEGER)BEGINCALL lq_audit_event(user_name,host_name,'crms.enrollment.status',query_type);IF query_type = 'Simple' THEN	SELECT p.pidn, e.*  FROM lq_view_enrollment e 		INNER JOIN temp_pidn p ON (p.PIDN = e.PIDN_Enrollment)       ORDER BY p.pidn, e.latestDate;ELSEIF query_type = 'SimpleAllPatients' THEN	SELECT p.pidn, e.* FROM lq_view_enrollment e 		RIGHT OUTER JOIN temp_pidn p ON (p.PIDN = e.PIDN_Enrollment)       ORDER BY p.pidn, e.latestDate;END IF;END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_get_linkdata`(user_name varchar(50), host_name varchar(25),query_type varchar(25), query_subtype VARCHAR(25), query_days INTEGER)    SQL SECURITY INVOKERBEGINIF query_type = 'VISIT' THEN	SELECT l.*, '---->' as `Visit Details`, v.* from temp_linkdata l inner join visit v on l.link_id=v.VID	ORDER BY l.pidn, l.link_date,l.link_id;ELSEIF query_type = 'INSTRUMENT' THEN 	SELECT l.*, '---->' as `Instrument Details`, i.* from temp_linkdata l inner join instrumenttracking i on l.link_id=i.InstrID	ORDER BY l.pidn, l.link_date,l.link_id;ELSE   SELECT * from temp_linkdata l  	ORDER BY l.pidn, l.link_date,l.link_id;END IF;END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_get_patient_demographics`(user_name varchar(50), host_name varchar(25),query_type varchar(25), query_subtype VARCHAR(25), query_days INTEGER)BEGINCALL lq_audit_event(user_name,host_name,'crms.patient.demographics',query_type);	IF query_type = 'Simple' THEN	SELECT p.pidn, d.*  FROM lq_view_demographics d 		INNER JOIN temp_pidn p ON (p.PIDN = d.PIDN_Demographics)       ORDER BY p.pidn;ELSEIF query_type = 'SimpleAllPatients' THEN	SELECT p.pidn, d.*   FROM lq_view_demographics d  		 RIGHT OUTER JOIN temp_pidn p ON (p.PIDN = d.PIDN_Demographics)       ORDER BY p.pidn;ELSEIF query_type IN ('SecondaryAll','SecondaryClosest') THEN 	 SELECT l.pidn, l.link_date,l.link_id,d.*  	 FROM temp_linkdata l INNER JOIN lq_view_demographics d ON (d.PIDN_Demographics=l.PIDN);END IF;END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_get_scheduling_visits`(user_name varchar(50), host_name varchar(25),query_type varchar(25), query_subtype VARCHAR(25), query_days INTEGER)BEGINCALL lq_audit_event(user_name,host_name,'crms.scheduling.visits',query_type);	IF query_type = 'Simple' THEN	SELECT p.pidn, v.*  FROM lq_view_visit v 		INNER JOIN temp_pidn p ON (p.PIDN = v.PIDN_visit)       ORDER BY p.pidn, v.vdate, v.vtype;ELSEIF query_type = 'SimpleAllPatients' THEN	SELECT p.pidn, v.*  FROM lq_view_visit v  		 RIGHT OUTER JOIN temp_pidn p ON (p.PIDN = v.PIDN_visit)       ORDER BY p.pidn,v.vdate, v.vtype;END IF;END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_set_linkdata`(user_name varchar(50), host_name varchar(25))BEGINDROP TABLE IF EXISTS temp_linkdata1;DROP TABLE IF EXISTS temp_linkdata;CREATE TEMPORARY TABLE temp_linkdata1(    pidn INTEGER NOT NULL,    link_date DATE NOT NULL,    link_id INTEGER NOT NULL,    link_type varchar(25) DEFAULT NULL);END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_set_linkdata_row`(user_name varchar(50), host_name varchar(25),pidn integer,link_date date, link_id integer)BEGININSERT INTO `temp_linkdata1` (`pidn`,`link_date`,`link_id`) VALUES(pidn,link_date,link_id);END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_set_pidns`(user_name varchar(50), host_name varchar(25))BEGINDROP TABLE IF EXISTS temp_pidn1;DROP TABLE IF EXISTS temp_pidn;CREATE TEMPORARY TABLE temp_pidn1(    pidn INTEGER NOT NULL);END$$DELIMITER ;DELIMITER $$USE `lava_crms`$$CREATE  PROCEDURE `lq_set_pidns_row`(user_name varchar(50), host_name varchar(25),pidn integer)BEGININSERT INTO `temp_pidn1` (`pidn`) values (pidn);END$$DELIMITER ;insert into versionhistory(`Module`,`Version`,`VersionDate`,`Major`,`Minor`,`Fix`,`UpdateRequired`)	VALUES ('lava-crms-model','3.0.4',NOW(),3,0,4,1);SET SQL_MODE=@OLD_SQL_MODE;SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;