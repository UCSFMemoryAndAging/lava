/**
 * Feb 9, 2006
 *
 * Copyright 2004 uitags
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.sf.uitags.tag.panel;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.jsp.JspException;
import javax.servlet.jsp.PageContext;

import net.sf.uitags.tag.AbstractUiTag;
import net.sf.uitags.tagutil.AttributeSupport;
import net.sf.uitags.tagutil.AttributeSupportHelper;
import net.sf.uitags.tagutil.ScopedIdGenerator;
import net.sf.uitags.tagutil.TaglibProperties;
import net.sf.uitags.util.Template;

/**
 * Tag that renders a button to display a panel containing user
 * specified content.
 *
 * @author hgani
 * @version $Id$
 */
public class PanelTag extends AbstractUiTag implements AttributeSupport {

  ///////////////////////////////
  ////////// Constants //////////
  ///////////////////////////////

  /**
   * Serial Version UID.
   */
  private static final long serialVersionUID = 100L;

  /**
   * Prefix for all javascript variables, functions, classes for this tag.
   */
  static final String JS_PREFIX = "uiPanel_";

  /**
   * Key of the scoped attribute that stores auto-incremented ID for
   * instances of this tag handler.
   */
  private static final String TAG_INSTANCE_ID_KEY =
      PanelTag.class.getName() + "instanceId";


  ///////////////////////////////////////////////
  ////////// Property keys (constants) //////////
  ///////////////////////////////////////////////

  /**
   * See the corresponding property in the factory default config file.
   */
  private static final String PROP_CSS = "panel.class";


  ////////////////////////////
  ////////// Fields //////////
  ////////////////////////////

  /**
   * The 'class' tag attribute.
   */
  private String cssClass;

  /**
   * The 'listener' tag attribute.
   */
  private String listener;

  /**
   * The 'anchorTo' and 'anchorToName' tag attributes.
   */
  private Position positioningStrategy = null;

  /**
   * Helper for tag that allows arbitrary HTML attributes.
   */
  private AttributeSupportHelper attributeHelper;

  /**
   * List of code generated by child tags, which is to be included
   * somewhere in the parent's generated code.
   */
  private List childJsCodeList;


  ///////////////////////////////////////////
  ////////// Tag attribute setters //////////
  ///////////////////////////////////////////

  /**
   * Tag attribute setter.
   *
   * @param val value of the tag attribute
   */
  public void setId(String val) {
    super.setId(val);
  }

  /** {@inheritDoc} */
  public String getId() {
    if (super.getId() == null) {
      long instanceId = ScopedIdGenerator.nextId(
          PageContext.REQUEST_SCOPE, TAG_INSTANCE_ID_KEY, this.pageContext) - 1;
      setId(PanelTag.JS_PREFIX + getTagName() + instanceId);
    }
    return super.getId();
  }

  /**
   * Tag attribute setter.
   *
   * @param val value of the tag attribute
   */
  public void setClass(String val) {
    this.cssClass = val;
  }

  /**
   * Tag attribute setter.
   *
   * @param val value of the tag attribute
   */
  public void setAnchorTo(String val) {
    this.positioningStrategy = Position.getFromAnchorId(val);
  }

  /**
   * Tag attribute setter.
   *
   * @param val value of the tag attribute
   */
  public void setAnchorToName(String val) {
    this.positioningStrategy = Position.getFromAnchorName(val);
  }

  /**
   * Tag attribute setter.
   *
   * @param val value of the tag attribute
   */
  public void setListener(String val) {
    this.listener = val;
  }


  ///////////////////////////////
  ////////// Tag logic //////////
  ///////////////////////////////

  /**
   * Instructs the servlet engine to buffer the panel's content.
   *
   * @see javax.servlet.jsp.tagext.Tag#doStartTag()
   * @return <code>EVAL_BODY_BUFFERED</code>
   * @throws JspException to communicate error
   */
  public int doStartTag() throws JspException {
    this.attributeHelper = new AttributeSupportHelper();
    this.childJsCodeList = new ArrayList();

    makeVisibleToChildren();
    return EVAL_BODY_BUFFERED;
  }

  private String getContentAsString() {
    // NOTE: body content might be null if there is no character between
    // the start and end tag (empty body)
    // this tag allows empty body to enable JSP developer to dynamically
    // create the panel content (e.g. using Javascript)
    if (this.bodyContent == null) {
      return "";
    }
    return this.bodyContent.getString();
  }

  /**
   * Renders the HTML code for the button and the Javascript code for the
   * action when the button is clicked.
   *
   * @see javax.servlet.jsp.tagext.Tag#doEndTag()
   * @return <code>EVAL_PAGE</code>
   * @throws JspException to communicate error
   */
  public int doEndTag() throws JspException {
    if (this.positioningStrategy != null) {
      addChildJsCode(this.positioningStrategy.getJsCode());
    }

    TaglibProperties prop = TaglibProperties.getInstance();
    prop.setRuntimeProperty(PROP_CSS, this.cssClass);

    Template tpl = Template.forName(Template.PANEL);
    tpl.map("id", getId());
    tpl.map("class", prop.get(PROP_CSS));
    tpl.map("listener", this.listener);
    tpl.map("content", getContentAsString());
    tpl.map("jsCodeList", this.childJsCodeList);
    tpl.map("otherAttributes", this.attributeHelper.eval());
    println(tpl.evalToString());

    // so that when the tag is reused the widget ID gets generated again
    setId(null);

    makeInvisibleFromChildren();
    return EVAL_PAGE;
  }

  /** {@inheritDoc} */
  public void addAttribute(String attrName, String attrValue) {
    this.attributeHelper.addAttribute(attrName, attrValue);
  }

  public void addChildJsCode(String code) {
    this.childJsCodeList.add(code);
  }


  ///////////////////////////////////
  ////////// Inner classes //////////
  ///////////////////////////////////

  /**
   * The type of positioning.
   *
   * @author hgani
   */
  private static class Position {
    /// Fields ///

    // values for velocity templates
    final String key;
    final String value;

    /// Constructors ///

    /**
     * Non-instantiable by client.
     */
    private Position(String key, String value) {
      this.key = key;
      this.value = value;
    }

    /// Methods ///

    String getJsCode() {
      Template tpl = Template.forName(Template.PANEL_ANCHOR);
      tpl.map(this.key, this.value);
      return tpl.evalToString();
    }

    static Position getFromAnchorId(String anchorId) {
      return new Position("anchorId", anchorId);
    }

    static Position getFromAnchorName(String anchorName) {
      return new Position("anchorName", anchorName);
    }
  }
}
