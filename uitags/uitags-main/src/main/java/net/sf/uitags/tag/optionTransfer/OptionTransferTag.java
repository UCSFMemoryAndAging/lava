 /**
  * Copyright 2004-2005 uitags
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
package net.sf.uitags.tag.optionTransfer;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.jsp.JspException;

import net.sf.uitags.tag.AbstractUiTag;
import net.sf.uitags.util.Template;

/**
 * Provides grouping of option transfer suites.
 *
 * @author hgani
 * @version $Id$
 */
public class OptionTransferTag extends AbstractUiTag {

  ///////////////////////////////
  ////////// Constants //////////
  ///////////////////////////////

  /**
   * Serial Version UID.
   */
  private static final long serialVersionUID = 100L;


  ////////////////////////////
  ////////// Fields //////////
  ////////////////////////////

  /**
   * List of code generated by child tags, which is to be included
   * somewhere in the parent's generated code.
   */
  private List childJsCodeList;
  /**
   * Template for printing necessary javascript code.
   */
  private Template template;

  void registerCategoryLister(String listerId, String listerName) {
    this.template.map("categoryId", listerId);
    this.template.map("categoryName", listerName);
  }

  void registerSourceLister(String listerId, String listerName) {
    this.template.map("sourceId", listerId);
    this.template.map("sourceName", listerName);
  }

  void registerTargetLister(String listerId, String listerName) {
    this.template.map("targetId", listerId);
    this.template.map("targetName", listerName);
  }


  ///////////////////////////////
  ////////// Tag logic //////////
  ///////////////////////////////

  /**
   * This method initializes some variables to be used for interaction
   * with the child tags. It also returns a flag to tell the servlet
   * engine to buffer the content of this tag's body.
   *
   * @see javax.servlet.jsp.tagext.Tag#doStartTag()
   * @return <code>EVAL_BODY_BUFFERED</code>
   * @throws JspException to communicate error
   */
  public int doStartTag() throws JspException {
    // Reset the variables that are going to be used after this point.
    this.template = Template.forName(Template.OPTION_TRANSFER);
    this.childJsCodeList = new ArrayList();

    makeVisibleToChildren();
    return EVAL_BODY_INCLUDE;
  }

  // Can only print HTML code in this method, because we need to process
  // all the child tags first.
  /**
   * Prints necessary Javascript code.
   *
   * @see javax.servlet.jsp.tagext.Tag#doEndTag()
   * @return <code>EVAL_PAGE</code>
   * @throws JspException to communicate error
   */
  public int doEndTag() throws JspException {
    this.template.map("jsCodeList", this.childJsCodeList);
    println(this.template.evalToString());

    makeInvisibleFromChildren();
    return EVAL_PAGE;
  }

  public void addChildJsCode(String code) {
    this.childJsCodeList.add(code);
  }
}
